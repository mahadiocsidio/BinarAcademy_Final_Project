openapi: 3.0.3
info:
  title: Learn Wise API App
  description: |-
    lorem ipsum dolor is amet
  contact:
    email: mahadiocsidio@students.amikom.ac.id
  version: 1.0.0
servers:
  - url: https://binar-academy-final-project.vercel.app

tags:
  - name: Start
    description: all about creating account or login
  - name: Account
    description: all about accounts profile
  - name: Course
    description: all about Course
  - name: Category
    description: all about Course Category
  - name: Payment
    description: all about Payment History
  - name: User Course
    description: all about Course that user have
  - name: Rating
    description: all about Rating
paths:
  /auth/register:
    post:
      tags:
        - Start
      operationId: create-new-user
      summary: Create a new user
      requestBody:
        required: true
        $ref: "#/components/requestBodies/register"
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                  message:
                    type: string
                  data:
                    type: object
                    properties:
                      account_id:
                        type: integer
                      nama:
                        type: string
                      email:
                        type: string
                      password:
                        type: string
                      no_telp:
                        type: string
                      negara:
                        type: string
                      kota:
                        type: string
                      role:
                        type: string
                      url_image:
                        type: string
                      is_verified:
                        type: boolean
                      created_at:
                        type: string
                        format: date-time
                      updated_at:
                        type: string
                        format: date-time
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
              examples:
                InvalidName:
                  summary: Invalid Name
                  value:
                    status: false
                    message: 'Nama harus memiliki maksimal 50 karakter'
                InvalidPassword:
                  summary: Invalid Password
                  value:
                    status: false
                    message: 'Password harus memiliki minimal 8 karakter dan maksimal 15 karakter'
                InvalidEmailFormat:
                  summary: Invalid Email Format
                  value:
                    status: false
                    message: 'Format email tidak valid'
                EmailAlreadyUsed:
                  summary: Email Already Used
                  value:
                    status: false
                    message: 'Email sudah dipakai'


  /auth/verify-otp:
    post:
      tags:
        - Start
      operationId: verify-otp
      summary: Verify OTP
      security:
        - bearerAuth: []
      requestBody:
        required: true
        $ref: "#/components/requestBodies/verify-otp"
      responses:
        '200':
          description: OTP verification successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Activation Code verified successfully'
                  err:
                    type: string
                    example: null
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                        example: user@example.com
                      otp:
                        type: string
                        example: 123456
                      is_verified:
                        type: boolean
                        example: true
        '400':
          description: Failed OTP verification
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Bad Request'
                  error:
                    type: string
                    example: 'Invalid Email or OTP'
                  data:
                    example: null

  /auth/resend-otp:
    post:
      tags:
        - Start
      operationId: resend-otp
      summary: Resend OTP
      security:
        - bearerAuth: []
      responses:
        '200':
          description: OTP resent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'OTP resent successfully'
                  err:
                    type: string
                    example: null
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                        example: user@example.com
        '400':
          description: Failed to resend OTP
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Bad Request'
                  err:
                    type: string
                    example: 'OTP not found for the user'
                  data:
                    example : null
        '404':
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Not Found'
                  err:
                    type: string
                    example: 'User not found'
                  data: 
                    example : null

  /auth/login:
    post:
      tags:
        - Start
      operationId: user-login
      summary: User login
      requestBody:
        description: User login credentials
        required: true
        $ref: "#/components/requestBodies/login"
      responses:
        '200':
          description: Successful login
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: Login successful
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                        $ref: '#/components/schemas/AccountModel'
                      token:
                        type: string
                        example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJlbWFpbCI6InB1dHJpaW5kcml5YW50aTE5MDIwM0BnbWFpbC5jb20iLCJpYXQiOjE3MDE0MDU5MDJ9.gTd_DuEmS1hfDaiDBOYFnQ9ITVw9qk_x0Yu09-04d-g"
        '400':
          description: Failed login
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Bad Request'
                  error:
                    type: string
                    example: 'Invalid Email or Password'
        '401':
          description: account not verified
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  err:
                    type: string
                    example: 'lakukan verifikasi terlebih dahulu'
                  message:
                    type: string
                    example: 'harap periksa email anda untuk mendapat otp'
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        example: 'john@example.com'
                      is_verified:
                        type: boolean
                        example: false

  /auth/reset-password:
    post:
      tags:
        - Start
      operationId: reset-password
      summary: Reset Password
      requestBody:
        description: Reset password request
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
      responses:
        '200':
          description: Password reset email sent successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'Send'
                  err:
                    type: string
                    example: null
                  data:
                    type: object
                    properties:
                      email:
                        type: string
                        format: email
                        example: user@example.com
        '400':
          description: Email not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'Email Not Found'
                  err:
                    type: string
                    example: 'Enter Registered Email!'
                  data:
                    example: null
    put:
      tags:
        - Start
      operationId: change-password
      summary: Reset Password
      parameters:
        - in: query
          name: token
          schema:
            type: string
            example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpZCI6NDAsImVtYWlsIjoiYiIsImlhdCI6MTcwMTk2MTIwOH0._GJxdj6WMMq3cwXRfR3LVwkSAu74rnPyMdvwhmo2wUU
      requestBody:
        description: change password
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                password:
                  type: string
                  example: password123
                ConfirmationPassword:
                  type: string
                  example: password213
      responses:
        '200':
          description: change password successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: 'success'
                  err:
                    type: string
                    example: null
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                          nama:
                            type: string
                            example: John Doe
                          email:
                            type: string
                            example: john@example.com
                          role:
                            type: string
                            example: user
        '400':
          description: new password not same
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: bad request
                  err:
                    type: string
                    example: please ensure that the password and password confirmation match!
                  data:
                    type: string
                    example: null
        '401':
          description: invalid token
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: 'bad request'
                  err:
                    type: string
                    example: invalid token
                  data:
                    type: string
                    example: null
  /auth/whoami:
    get:
      tags:
        - Start
      summary: Get all accounts profile
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: true
                  message:
                    type: string
                    example: OK
                  err:
                    type: string
                    example: null
                  data:
                    type: object
                    properties:
                      user:
                        type: object
                        properties:
                        $ref: '#/components/schemas/AccountModel'
        '401':
          description: Failed response
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: boolean
                    example: false
                  message:
                    type: string
                    example: Unauthorized
                  err:
                    type: string
                    example: invalid token
                  data:
                    type: string
                    example: null
                          
  /profile:
    get:
      tags:
        - Account
      summary: Get all accounts profile
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  - account_id: 1
                    nama: John Doe
                    email: john@example.com
                    role: user
                    created_at: '2023-01-01T12:00:00Z'
                  - account_id: 2
                    nama: Jane Doe
                    email: jane@example.com
                    role: admin
                    created_at: '2023-01-02T14:30:00Z'
        '500':
          description: Internal Server Error

  /profile/account:
    get:
      tags:
        - Account
      summary: Get the current user's profile account
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  account_id: 1
                  nama: John Doe
                  email: john@example.com
                  no_telp: '+1234567890'
                  negara: 'Indonesia'
                  kota: 'Jakarta'
                  url_image: 'https://example.com/image.jpg'
        '404':
          description: Account not found
          content:
            application/json:
              example:
                success: false
                message: 'Account not found'
        '500':
          description: Internal Server Error

  /profile/updateProfile:
    put:
      tags:
        - Account
      summary: Update user profile
      security:
        - bearerAuth: []
      requestBody:
        $ref: "#/components/requestBodies/updateProfile"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  account_id: 1
                  nama: John Doe
                  email: john@example.com
                  no_telp: '+1234567890'
                  negara: 'Indonesia'
                  kota: 'Jakarta'
                  url_image: 'https://example.com/image.jpg'
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: 'Invalid request payload'
        '404':
          description: Account not found
          content:
            application/json:
              example:
                success: false
                message: 'Account not found'
        '500':
          description: Internal Server Error

  /profile/changePassword:
    post:
      tags:
        - Account
      summary: Change user password
      security:
        - bearerAuth: []
      requestBody:
        required: true
        $ref: "#/components/requestBodies/changePassword"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: 'Successfully changed your password'
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: 'Invalid request payload'
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                success: false
                message: 'Invalid current password'
        '404':
          description: Account isnt registered
          content:
            application/json:
              example:
                success: false
                message: 'Account isnt registered'
        '500':
          description: Internal Server Error
        
  /profile/paymentHistory:
    get:
      summary: Get Account's Transaction History
      security:
        - bearerAuth: []
      description: Get Account's Transaction History that have login
      tags:
        - Account
      parameters:
        - name: Authorization
          in: header
          description: JWT Bearer token
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              example:
                success: true
                data:
                  - status: "Berhasil"
                    Course:
                      title: "Pengembangan Web 101"
                      harga: 29.99
                      level: "Pemula"
                      Kategori:
                        title: "Pemrograman Web"
                  - status: "Berhasil"
                    Course:
                      title: "JavaScript Lanjutan"
                      harga: 49.99
                      level: "Lanjutan"
                      Kategori:
                        title: "Pemrograman Web"
        '401':
          description: Unauthorized
          content:
            application/json:
              example:
                success: false
                message: "Unauthorized: Token tidak valid atau tidak ada"
        '500':
          description: Internal Server Error
          content:
            application/json:
              example:
                success: false
                message: "Terjadi kesalahan server"

  /class:
    get:
      summary: Get all user courses with pagination
      tags:
        - User Course
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items to return per page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number to retrieve
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  pagination:
                    totalItems: 25
                    totalPages: 3
                    currentPage: 1
                    pageSize: 10
                  userCourse:
                    - user_course_id: 1
                      account_id: 101
                      course_id: 201
                      Course:
                        title: 'Introduction to Web Development'
                        harga: 29.99
                        Kategori:
                          title: 'Programming'
                    - user_course_id: 2
                      account_id: 102
                      course_id: 202
                      Course:
                        title: 'Data Science Fundamentals'
                        harga: 19.99
                        Kategori:
                          title: 'Data Science'
        '404':
          description: No user courses found
          content:
            application/json:
              example:
                success: false
                message: 'No user courses found'
        '500':
          description: Internal Server Error
    
    post:
      summary: Create user course
      tags:
        - User Course
      requestBody:
        required: true
        $ref: "#/components/requestBodies/createUserCourse"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  user_course_id: 1
                  account_id: 101
                  course_id: 201
        '400':
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: 'Invalid request payload'
        '404':
          description: Course not found
          content:
            application/json:
              example:
                success: false
                message: 'Course not found'
        '500':
          description: Internal Server Error
  
  /class/myclass:
    get:
      summary: Get user courses by login
      security:
        - bearerAuth: []
      tags:
        - User Course
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  - user_course_id: 1
                    account_id: 101
                    course_id: 201
                    Course:
                      title: 'Introduction to Web Development'
                      harga: 29.99
                      Kategori:
                        title: 'Programming'
                      Riwayat_Transaksi:
                        status: 'completed'
                  - user_course_id: 2
                    account_id: 101
                    course_id: 202
                    Course:
                      title: 'Data Science Fundamentals'
                      harga: 19.99
                      Kategori:
                        title: 'Data Science'
                      Riwayat_Transaksi:
                        status: 'in-progress'
        '404':
          description: No user courses found for the account
          content:
            application/json:
              example:
                success: false
                message: 'No user courses found for the account'
        '500':
          description: Internal Server Error
  
  /class/{account_id}:
    get:
      summary: Get user courses by account ID
      tags:
        - User Course
      parameters:
        - in: path
          name: account_id
          required: true
          schema:
            type: integer
          description: ID of the user account
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  - user_course_id: 1
                    account_id: 101
                    course_id: 201
                    Course:
                      title: 'Introduction to Web Development'
                      harga: 29.99
                      Kategori:
                        title: 'Programming'
                  - user_course_id: 2
                    account_id: 101
                    course_id: 202
                    Course:
                      title: 'Data Science Fundamentals'
                      harga: 19.99
                      Kategori:
                        title: 'Data Science'
        '404':
          description: No user courses found for the account
          content:
            application/json:
              example:
                success: false
                message: 'No user courses found for the account'
        '500':
          description: Internal Server Error

  /payment:
    get:
      summary: Get all payments
      tags:
        - Payment
      description: Retrieve a list of payment transactions with pagination.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items to retrieve per page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  pagination:
                    total_items: 100  # Replace with the actual total number of items
                    total_pages: 10   # Replace with the actual total number of pages
                    current_page: 1
                    items_per_page: 10
                  payment:
                    - riwayat_transaksi_id: 1
                      # Add other payment fields here
                    - riwayat_transaksi_id: 2
                      # Add other payment fields here
                  # Add more payment entries as needed

        '500':
          description: Internal Server Error

    post:
      summary: Create a new payment
      tags:
        - Payment
      description: Create a new payment transaction for a course.
      requestBody:
        required: true
        $ref: "#/components/requestBodies/createPayment"

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  riwayat_transaksi_id: 1
                  account_id: 123
                  course_id: 456
                  tanggal_pembayaran: '2023-01-01T12:00:00Z' # Replace with the actual timestamp
                  metode_pembayaran: 'Credit Card'
                  status: 'Menunggu Pembayaran'

        '400':
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: 'Invalid input. Please provide valid account_id, course_id, and metode_pembayaran.'

        '404':
          description: Not Found
          content:
            application/json:
              example:
                success: false
                message: 'Course is not registered'

        '500':
          description: Internal Server Error

  /payment/checkout:
    get:
      summary: Get payment details after user login
      tags:
        - Payment
      security:
        - bearerAuth: []
      description: Retrieve details of payment transactions for the logged-in user.
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  - riwayat_transaksi_id: 1
                    account_id: 123
                    Course:
                      title: 'Web Development Fundamentals'
                      harga: 99.99
                    status: 'Sudah Bayar'
                    tanggal_pembayaran: '2023-01-01T12:00:00Z' # Replace with the actual timestamp
                  - riwayat_transaksi_id: 2
                    account_id: 123
                    Course:
                      title: 'Data Science Basics'
                      harga: 129.99
                    status: 'Menunggu Pembayaran'
                    tanggal_pembayaran: '2023-02-01T12:00:00Z' # Replace with the actual timestamp

        '404':
          description: Not Found
          content:
            application/json:
              example:
                success: false
                message: 'No payment found for the logged-in user.'

        '500':
          description: Internal Server Error

    post:
      summary: Create a new payment after user login
      tags:
        - Payment
      security:
        - bearerAuth: []
      description: Create a new payment transaction for a course after user login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_id:
                  type: integer
                  description: ID of the course for which the payment is made
                metode_pembayaran:
                  type: string
                  description: Payment method used (e.g., credit card, bank transfer)
              required:
                - course_id
                - metode_pembayaran

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  riwayat_transaksi_id: 1
                  account_id: 123
                  course_id: 456
                  tanggal_pembayaran: '2023-01-01T12:00:00Z' # Replace with the actual timestamp
                  metode_pembayaran: 'Credit Card'
                  status: 'Menunggu Pembayaran'

        '400':
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: 'Invalid input. Please provide valid course_id and metode_pembayaran.'

        '404':
          description: Not Found
          content:
            application/json:
              example:
                success: false
                message: 'Payment isnt registered.'

        '500':
          description: Internal Server Error

    put:
      summary: Update payment status after user login
      tags:
        - Payment
      security:
        - bearerAuth: []
      description: Update the status of a payment transaction for a specific course after user login.
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                course_id:
                  type: integer
                  description: ID of the course for which the payment status is updated
              required:
                - course_id

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: 'Payment with id 1 updated'
                data:
                  riwayat_transaksi_id: 1
                  account_id: 123
                  course_id: 456
                  tanggal_pembayaran: '2023-01-01T12:00:00Z' # Replace with the actual timestamp
                  metode_pembayaran: 'Credit Card'
                  status: 'Sudah Bayar'

        '400':
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: 'Invalid input. Please provide a valid course_id.'

        '404':
          description: Not Found
          content:
            application/json:
              example:
                success: false
                message: 'Transaction not found for the specified account and course.'

        '500':
          description: Internal Server Error
    
  /payment/{riwayat_transaksi_id}:
    get:
      summary: Get payment details by ID
      tags:
        - Payment
      description: Retrieve details of a payment transaction based on the account ID.
      parameters:
        - in: path
          name: account_id
          required: true
          description: ID of the account for which payment details are requested
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  riwayat_transaksi_id: 1
                  account_id: 123
                  Course:
                    title: 'Web Development Fundamentals'
                    harga: 99.99
                  status: 'Sudah Bayar'
                  tanggal_pembayaran: '2023-01-01T12:00:00Z' # Replace with the actual timestamp

        '404':
          description: Not Found
          content:
            application/json:
              example:
                success: false
                message: 'Payment for the specified account ID not found.'

        '500':
          description: Internal Server Error

    put:
      summary: Update payment status by ID
      tags:
        - Payment
      description: Update the status of a payment transaction by its ID.
      parameters:
        - in: path
          name: riwayat_transaksi_id
          required: true
          description: ID of the payment transaction to update
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: 'Payment with id 1 updated'
                data:
                  riwayat_transaksi_id: 1
                  account_id: 123
                  course_id: 456
                  tanggal_pembayaran: '2023-01-01T12:00:00Z' # Replace with the actual timestamp
                  metode_pembayaran: 'Credit Card'
                  status: 'Sudah Bayar'

        '400':
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: 'Invalid input. Please provide a valid status.'

        '404':
          description: Not Found
          content:
            application/json:
              example:
                success: false
                message: 'Payment with specified ID not found.'

        '500':
          description: Internal Server Error

  /course:
    get:
      summary: Get all courses
      tags:
        - Course
      description: Retrieve a list of courses with pagination.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items to retrieve per page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  pagination:
                    total_items: 100  # Replace with the actual total number of items
                    total_pages: 10   # Replace with the actual total number of pages
                    current_page: 1
                    items_per_page: 10
                  course:
                    - course_id: 1
                      title: 'Web Development Fundamentals'
                      kategori_id: 101
                      premium: true
                      harga: 99.99
                    - course_id: 2
                      title: 'Data Science Basics'
                      kategori_id: 102
                      premium: false
                      harga: 129.99

        '500':
          description: Internal Server Error

  /course/addCourse:
    post:
      summary: Add a new course
      tags:
        - Course
      description: Add a new course to the system.
      requestBody:
        required: true
        $ref: "#/components/requestBodies/addCourse"

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  course_id: 1
                  title: 'Web Development Fundamentals'
                  harga: 99.99
                  Kategori:
                    title: 'Programming'
                  # Add other course fields as needed

        '400':
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: 'Invalid input. Please provide valid title, kategori_id, harga, and mentor_id.'

        '500':
          description: Internal Server Error

  /course/search:
    get:
      summary: Get course by title
      tags:
        - Course
      description: Retrieve a course by title with case-insensitive search.
      parameters:
        - in: query
          name: title
          schema:
            type: string
          description: Title of the course to retrieve (case-insensitive)

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  - course_id: 1
                    title: 'Web Development Fundamentals'
                    kategori_id: 101
                    harga: 99.99
                    Kategori:
                      title: 'Programming'

        '404':
          description: Not Found
          content:
            application/json:
              example:
                success: false
                message: 'Course not found.'

        '500':
          description: Internal Server Error

  /category:
    get:
      summary: Get all categories
      tags:
        - Category
      description: Retrieve a list of categories with pagination.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items to retrieve per page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: 'success'
                data:
                  pagination:
                    total_items: 100  # Replace with the actual total number of items
                    total_pages: 10   # Replace with the actual total number of pages
                    current_page: 1
                    items_per_page: 10
                  category:
                    - kategori_id: 1
                      title: "UI/UX Design"
                      deskripsi: "Pendekatan pengembangan produk digital yang mencakup UI Design (fokus pada tampilan visual), UX Design (berorientasi pada pengalaman pengguna), dan bekerja sama untuk menciptakan produk yang menarik dan mudah digunakan."
                      url_img_preview: null
                    - kategori_id: 2
                      title: "Product Management"
                      deskripsi: "Memimpin pengembangan, peluncuran, dan pengelolaan produk atau layanan. Termasuk identifikasi kebutuhan pasar, perencanaan strategis, koordinasi tim, dan komunikasi antardepartemen untuk memastikan produk mencapai tujuan bisnis."
                      url_img_preview: null
                  # Add more category entries as needed

        '500':
          description: Internal Server Error

    post:
      summary: Create a new category
      tags:
        - Category
      description: Create a new category in the system.
      requestBody:
        required: true
        $ref: "#/components/requestBodies/createCategory"
      responses:
        '201':
          description: Successful response
          content:
            application/json:
              example:
                status: true
                message: 'success!'
                err: null
                data:
                  kategori_id: 1
                  title: 'Programming'
                  deskripsi: 'Category for programming courses'
                  url_img_preview: 'https://example.com/programming.jpg'
                  # Add other category fields as needed

        '400':
          description: Bad Request
          content:
            application/json:
              example:
                status: false
                message: 'bad request!'
                err: 'title is already used'
                data: null

        '500':
          description: Internal Server Error
  
  /category/{kategori_id}:
    get:
      summary: Get category by ID
      tags:
        - Category
      description: Retrieve a category by its ID.
      parameters:
        - in: path
          name: kategori_id
          schema:
            type: integer
          required: true
          description: ID of the category to retrieve

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                status: true
                message: 'success!'
                err: null
                data:
                  category:
                    kategori_id: 1
                    title: 'Programming'
                    deskripsi: 'Category for programming courses'
                    url_img_preview: 'https://example.com/programming.jpg'
                    # Add other category fields as needed

        '400':
          description: Bad Request
          content:
            application/json:
              example:
                status: false
                message: 'bad request!'
                err: 'category not found!'
                data: null

        '500':
          description: Internal Server Error

    put:
      summary: Update category by ID
      tags:
        - Category
      description: Update a category by its ID.
      parameters:
        - in: path
          name: kategori_id
          schema:
            type: integer
          required: true
          description: ID of the category to update
      requestBody:
        required: true
        $ref: "#/components/requestBodies/updateProfile"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                status: true
                message: 'Successful update category'
                err: null
                data:
                  category:
                    kategori_id: 1
                    title: 'Updated Programming'
                    deskripsi: 'Updated category for programming courses'
                    url_img_preview: 'https://example.com/updated_programming.jpg'
                    # Add other category fields as needed

        '400':
          description: Bad Request
          content:
            application/json:
              example:
                status: false
                message: 'bad request!'
                err: 'title is already used'
                data: null

        '500':
          description: Internal Server Error
    
    delete:
      summary: Delete category by ID
      tags:
        - Category
      description: Delete a category by its ID.
      parameters:
        - in: path
          name: kategori_id
          schema:
            type: integer
          required: true
          description: ID of the category to delete

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                status: true
                message: 'Successful delete category'
                err: null
                data:
                  kategori_id: 1
                  title: 'Deleted Programming'
                  deskripsi: 'Deleted category for programming courses'
                  url_img_preview: 'https://example.com/deleted_programming.jpg'
                  # Add other category fields as needed

        '400':
          description: Bad Request
          content:
            application/json:
              example:
                status: false
                message: 'bad request!'
                err: 'category not found!'
                data: null

        '500':
          description: Internal Server Error

  /rating:
    get:
      summary: Get all rating
      tags:
        - Rating
      description: Retrieve a list of ratings with pagination.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items to retrieve per page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: 'success'
                data:
                  pagination:
                    total_items: 100  # Replace with the actual total number of items
                    total_pages: 10   # Replace with the actual total number of pages
                    current_page: 1
                    items_per_page: 10
                  rating:
                    - rating_id: 1
                      account_id: 1,
                      course_id : 1,
                      skor: 4,
                      comment: "This course was really helpful!"
                    - rating_id: 2
                      account_id: 2,
                      course_id : 1,
                      skor: 1,
                      comment: "This course was really not helpful!"
                  # Add more category entries as needed

        '500':
          description: Internal Server Error

  /rating/myRates:
    get:
      summary: Get all rating by Login
      security:
        - bearerAuth: []
      tags:
        - Rating
      description: Retrieve a list of ratings with pagination.
      parameters:
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
          description: Number of items to retrieve per page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: 'success'
                data:
                  pagination:
                    total_items: 100  # Replace with the actual total number of items
                    total_pages: 10   # Replace with the actual total number of pages
                    current_page: 1
                    items_per_page: 10
                  rating:
                    - rating_id: 1
                      account_id: 1,
                      course_id : 1,
                      skor: 4,
                      comment: "This course was really helpful!"
                    - rating_id: 2
                      account_id: 2,
                      course_id : 1,
                      skor: 1,
                      comment: "This course was really not helpful!"
                  # Add more category entries as needed

        '500':
          description: Internal Server Error


  /rating/filter:
    get:
      summary: Get all ratings by score
      tags:
        - Rating
      description: Retrieve a list of ratings filtered by score with pagination. Sorting and ordering are not supported in this endpoint.
      parameters:
        - in: query
          name: skor
          schema:
            type: integer
            minimum: 1
            maximum: 5
            description: Filter ratings by score (1 to 5)
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            description: Number of items to retrieve per page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            description: Page number

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: 'Successful get all ratings by score'
                data:
                  pagination:
                    total_items: 100  # Replace with the actual total number of items
                    total_pages: 10   # Replace with the actual total number of pages
                    current_page: 1
                    items_per_page: 10
                  rating:
                    - rating_id: 1
                      account_id: 1
                      course_id: 1
                      skor: 4
                      comment: "This course was really helpful!"
                    - rating_id: 2
                      account_id: 2
                      course_id: 1
                      skor: 4
                      comment: "This course was really good!"
                    # Add more category entries as needed

        '400':
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: 'Bad request!'
                err: 'Score cannot be greater than 5.'
                data: null

        '404':
          description: No Data Found
          content:
            application/json:
              example:
                success: true
                message: 'No data found for the requested score.'
                data: null

        '500':
          description: Internal Server Error

  /rating/rate:
    post:
      summary: Create a new Rating
      security:
        - bearerAuth: []
      tags:
        - Rating
      description: Create a new Rating in the system.
      requestBody:
        required: true
        $ref: "#/components/requestBodies/createRating"


      responses:
        '201':
          description: Successful response
          content:
            application/json:
              example:
                status: true
                message: 'Successful create rating'
                err: null
                data:
                  createRating:
                    account_id: 1
                    course_id: 1
                    skor: 4
                    comment: 'Great course!'
                    # Add other Rating fields as needed
        '500':
          description: Internal Server Error

  /rating/{rating_id}:
    put:
      summary: Update Rating by ID
      security:
        - bearerAuth: []
      tags:
        - Rating
      description: Update a Rating by its ID.
      parameters:
        - in: path
          name: rating_id
          schema:
            type: integer
          required: true
          description: ID of the Rating to update
      requestBody:
        required: true
        $ref: "#/components/requestBodies/updateRating"
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                status: true
                message: 'Successful update Rating'
                err: null
                data:
                  rating:
                    rating_id: 1
                    skor: 4
                    comment: 'Updated comment'
                    # Add other Rating fields as needed

        '500':
          description: Internal Server Error

    delete:
      summary: Delete Rating by ID
      security:
        - bearerAuth: []
      tags:
        - Rating
      description: Delete a Rating by its ID.
      parameters:
        - in: path
          name: rating_id
          schema:
            type: integer
          required: true
          description: ID of the rating to delete

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                status: true
                message: Successful delete rating
                err: null
                data:
                  rating_id: 1
                  skor: 4
                  comment: Great Course
                  # Add other Rating fields as needed

        '500':
          description: Internal Server Error

    get:
      summary: Get Rating by ID
      tags:
        - Rating
      parameters:
        - in: path
          name: rating_id
          required: true
          schema:
            type: integer
          description: ID of the rating
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                data:
                  rating_id: 1
                  account_id: 101
                  course_id: 201
                  skor: 4
                  comment: 'Great course!'
                  # Add other rating fields as needed

        '400':
          description: Bad Request
          content:
            application/json:
              example:
                success: false
                message: bad request!
                err: Rating not found
                data: null

  /chapter/:
    get:
      tags:
        - Chapter
      summary: Get all chapters
      description: "Retrieve a list of chapters with pagination."
      parameters:
        - in: query
          name: limit
          schema: 
            type: integer
            default: 10
          description: Number of items to retrieve per page
        - in: query
          name: page
          schema:
            type: integer
            default: 1
          description: Page number

      responses:
        '200':
          description: Successful response
          content:
            application/json:
              example:
                success: true
                message: "Success"
                data:
                  pagination:
                    total_items: 100  # Replace with the actual total number of items
                    total_pages: 10   # Replace with the actual total number of pages
                    current_page: 1
                    items_per_page: 10
                  category:
                    - chapter_id: 1
                      title: "Chapter 1 - Pendahuluan"
                      course_id: 1
                    - kategori_id: 2
                      title: "Product Management"
                      course_id: 1

        '500':
          description: Internal Server Error

  /chapter/{course_id}:
    get:
      tags:
        - Chapter
      summary: Get chapters by course ID
      parameters:
        - name: course_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Successful response
          content:
            application/json:
              schema:
                type: object
                properties:
                  success:
                    type: boolean
                  data:
                    type: array
                    items:
                      $ref: '#/components/schemas/ChapterModel'
        '404':
          description: Course not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /chapter/addChapter:
    post:
      tags:
        - Chapter
      summary: Add a new chapter
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ChapterInput'
      responses:
        '201':
          description: Chapter created successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '404':
          description: Course or Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /chapter/updateChapter/{chapter_id}:
    put:
      tags:
        - Chapter
      summary: Update a chapter by ID
      parameters:
        - name: chapter_id
          in: path
          required: true
          schema:
            type: integer
        - name: body
          in: path
          required: true
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterInput'
      responses:
        '201':
          description: Chapter updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ChapterResponse'
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BadRequestResponse'
        '404':
          description: Chapter, Course, or Video not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /chapter/deleteChapter/{chapter_id}:
    delete:
      tags:
        - Chapter
      summary: Delete a chapter by ID
      parameters:
        - name: chapter_id
          in: path
          required: true
          schema:
            type: integer
      responses:
        '200':
          description: Chapter deleted successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/SuccessResponse'
        '404':
          description: Chapter not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

        '500':
          description: Internal Server Error

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    UnauthorizedResponse:
      title: UnauthorizedResponse
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: 'Unauthorized'
        data:
          example: null
    BasicResponse:
      title: BasicResponse
      type: object
      properties:
        status:
          type: boolean
          example: true
        message:
          type: string
          example: 'success'
    BadRequestResponse:
      title: BadRequestResponse
      type: object
      properties:
        status:
          type: boolean
          example: false
        message:
          type: string
          example: 'some error from user'
        data:
          example: null
    AccountResponse:
      type: object
      properties:
        success:
          type: boolean
        data:
          $ref: '#/components/schemas/AccountModel'

    AccountWithMessageResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          $ref: '#/components/schemas/AccountModel'

    LogoutResponse:
      type: object
      properties:
        message:
          type: string

    SuccessResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string

    Error:
      type: object
      properties:
        success:
          type: boolean
          example: false
        message:
          type: string

    ChapterInput:
      type: object
      properties:
        chapter_title:
          type: string
        course_id:
          type: integer
        video_id:
          type: integer

    ChapterResponse:
      type: object
      properties:
        success:
          type: boolean
        message:
          type: string
        data:
          $ref: '#/components/schemas/ChapterModel'

    DateModel:
      title: DateModel
      type: object
      properties:
        createdAt:
          type: string
          example: '2023-10-15T12:13:48.276Z'
        updatedAt:
          type: string
          example: '2023-10-15T12:13:48.276Z'

    AccountModel:
      type: object
      properties:
        account_id:
          type: integer
          format: int64
          example: 1
        nama:
          type: string
          example: "John Doe"
        email:
          type: string
          example: "john@example.com"
        password:
          type: string
          example: "password123"
        no_telp:
          type: string
          example: "123456789"
        negara:
          type: string
          example: "Indonesia"
        kota:
          type: string
          example: "Jakarta"
        role:
          type: string
          example: "user"
        url_image:
          type: string
          example: "https://example.com/image.png"
        is_verified:
          type: boolean
          example: true
        created_at:
          type: string
          format: date-time
          example: "2023-10-15T12:13:48.276Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-10-15T12:13:48.276Z"

    OtpModel:
      type: object
      properties:
        otp_id:
          type: integer
          format: int64
          example: 1
        otp:
          type: string
          example: "123456"
        created_at:
          type: string
          format: date-time
          example: "2023-10-15T12:13:48.276Z"
        account:
          $ref: "#/components/schemas/AccountModel"

    MentorModel:
      type: object
      properties:
        mentor_id:
          type: integer
          format: int64
          example: 1
        name:
          type: string
          example: "Mentor Name"
        job:
          type: string
          example: "Job Title"
        Mentor_course:
          type: array
          items:
            $ref: "#/components/schemas/Mentor_courseModel"
        Course:
          type: array
          items:
            $ref: "#/components/schemas/CourseModel"

    KategoriModel:
      type: object
      properties:
        kategori_id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Category Title"
        deskripsi:
          type: string
          example: "Category Description"
        url_img_preview:
          type: string
          example: "https://example.com/image.png"
        Course:
          type: array
          items:
            $ref: "#/components/schemas/CourseModel"

    CourseModel:
      type: object
      properties:
        course_id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Course Title"
        deskripsi:
          type: string
          example: "Course Description"
        kategori_id:
          type: integer
          format: int64
          example: 1
        premium:
          type: boolean
          example: false
        mentor_id:
          type: integer
          format: int64
          example: 1
        level:
          type: string
          example: "Beginner"
        harga:
          type: number
          example: 99.99
        url_image_preview:
          type: string
          example: "https://example.com/image.png"
        url_gc_tele:
          type: string
          example: "https://t.me/course_channel"
        created_at:
          type: string
          format: date-time
          example: "2023-10-15T12:13:48.276Z"
        updated_at:
          type: string
          format: date-time
          example: "2023-10-15T12:13:48.276Z"
        Kategori:
          $ref: "#/components/schemas/KategoriModel"
        Mentor:
          $ref: "#/components/schemas/MentorModel"
        Chapter:
          type: array
          items:
            $ref: "#/components/schemas/ChapterModel"
        User_course:
          type: array
          items:
            $ref: "#/components/schemas/User_courseModel"
        Mentor_course:
          type: array
          items:
            $ref: "#/components/schemas/Mentor_courseModel"
        Course_progress:
          type: array
          items:
            $ref: "#/components/schemas/Course_progressModel"
        Rating:
          type: array
          items:
            $ref: "#/components/schemas/RatingModel"
        Promo:
          type: array
          items:
            $ref: "#/components/schemas/PromoModel"
        Riwayat_Transaksi:
          type: array
          items:
            $ref: "#/components/schemas/Riwayat_TransaksiModel"

    ChapterModel:
      type: object
      properties:
        chapter_id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Chapter Title"
        course_id:
          type: integer
          format: int64
          example: 1

    VideoModel:
      type: object
      properties:
        video_id:
          type: integer
          format: int64
          example: 1
        chapter_id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Video Title"
        deskripsi:
          type: string
          example: "Video Description"
        url_video:
          type: string
          example: "https://example.com/video.mp4"
        is_preview:
          type: boolean
          example: false
        Chapter:
          $ref: "#/components/schemas/ChapterModel"
        Course_progress:
          type: array
          items:
            $ref: "#/components/schemas/Course_progressModel"

    User_courseModel:
      type: object
      properties:
        user_course_id:
          type: integer
          format: int64
          example: 1
        account_id:
          type: integer
          format: int64
          example: 1
        course_id:
          type: integer
          format: int64
          example: 1
        Account:
          $ref: "#/components/schemas/AccountModel"
        Course:
          $ref: "#/components/schemas/CourseModel"

    Mentor_courseModel:
      type: object
      properties:
        mentor_course_id:
          type: integer
          format: int64
          example: 1
        mentor_id:
          type: integer
          format: int64
          example: 1
        course_id:
          type: integer
          format: int64
          example: 1
        Mentor:
          $ref: "#/components/schemas/MentorModel"
        Course:
          $ref: "#/components/schemas/CourseModel"

    Course_progressModel:
      type: object
      properties:
        course_progres_id:
          type: integer
          format: int64
          example: 1
        account_id:
          type: integer
          format: int64
          example: 1
        course_id:
          type: integer
          format: int64
          example: 1
        video_id:
          type: integer
          format: int64
          example: 1
        is_done:
          type: boolean
          example: false
        last_access:
          type: string
          format: date-time
          example: "2023-10-15T12:13:48.276Z"
        Account:
          $ref: "#/components/schemas/AccountModel"
        Course:
          $ref: "#/components/schemas/CourseModel"
        Video:
          $ref: "#/components/schemas/VideoModel"

    RatingModel:
      type: object
      properties:
        rating_id:
          type: integer
          format: int64
          example: 1
        account_id:
          type: integer
          format: int64
          example: 1
        course_id:
          type: integer
          format: int64
          example: 1
        skor:
          type: integer
          example: 5
        comment:
          type: string
          example: "This course is great!"
        Account:
          $ref: "#/components/schemas/AccountModel"
        Course:
          $ref: "#/components/schemas/CourseModel"

    PromoModel:
      type: object
      properties:
        promo_id:
          type: integer
          format: int64
          example: 1
        course_id:
          type: integer
          format: int64
          example: 1
        deskripsi:
          type: string
          example: "Promo Description"
        tanggal_mulai:
          type: string
          format: date-time
          example: "2023-10-15T12:13:48.276Z"
        tanggal_selesai:
          type: string
          format: date-time
          example: "2023-10-15T12:13:48.276Z"
        total_promo:
          type: integer
          example: 100
        Course:
          $ref: "#/components/schemas/CourseModel"

    Riwayat_TransaksiModel:
      type: object
      properties:
        riwayat_transaksi_id:
          type: integer
          format: int64
          example: 1
        account_id:
          type: integer
          format: int64
          example: 1
        course_id:
          type: integer
          format: int64
          example: 1
        metode_pembayaran:
          type: string
          example: "Credit Card"
        tanggal_pembayaran:
          type: string
          format: date-time
          example: "2023-10-15T12:13:48.276Z"
        status:
          type: string
          example: "Success"
        Account:
          $ref: "#/components/schemas/AccountModel"
        Course:
          $ref: "#/components/schemas/CourseModel"

    NotifikasiModel:
      type: object
      properties:
        notifikasi_id:
          type: integer
          format: int64
          example: 1
        account_id:
          type: integer
          format: int64
          example: 1
        title:
          type: string
          example: "Notification Title"
        deskripsi:
          type: string
          example: "Notification Description"
        is_read:
          type: boolean
          example: false
        Account:
          $ref: "#/components/schemas/AccountModel"

  requestBodies:
    register:
      content:
          application/json:
            schema:
              type: object
              properties:
                nama:
                  type: string
                  maxLength: 50
                  example: "John Doe"
                email:
                  type: string
                  format: email
                  example: "user@example.com"
                no_telp:
                  type: string
                  example: "123456789"
                password:
                  type: string
                  minLength: 8
                  maxLength: 15
                  example: "password123"
                ConfirmationPassword:
                  type: string
                  minLength: 8
                  maxLength: 15
                  example: "password123"
    verify-otp:
      content:
          application/json:
            schema:
              type: object
              properties:
                otp:
                  type: string
                  example: 494387
    login:
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              email:
                type: string
                format: email
                example: user@example.com
              password:
                type: string
                example: password123
    addCourse:
      content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the new course
                deskripsi:
                  type: string
                  description: Description of the new course
                kode_kelas:
                  type: string
                  description: Code of the new course
                kategori_id:
                  type: integer
                  description: ID of the category to which the new course belongs
                harga:
                  type: number
                  description: Price of the new course
                premium:
                  type: boolean
                  description: Whether the new course is premium or not
                mentor_id:
                  type: integer
                  description: ID of the mentor for the new course
                level:
                  type: string
                  description: Level of the new course (e.g., beginner, intermediate, advanced)
              required:
                - title
                - kategori_id
                - harga
                - mentor_id
    
    createCategory:
      content:
        application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Title of the new category
                deskripsi:
                  type: string
                  description: Description of the new category
                url_img_preview:
                  type: string
                  description: URL of the image preview for the new category
              required:
                - title
                - deskripsi
      
    updateCategory:
      content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: Updated title of the category
                deskripsi:
                  type: string
                  description: Updated description of the category
                url_img_preview:
                  type: string
                  description: Updated URL of the image preview for the category

    createPayment:
      content:
          application/json:
            schema:
              type: object
              properties:
                account_id:
                  type: integer
                  description: ID of the account making the payment
                course_id:
                  type: integer
                  description: ID of the course for which the payment is made
                metode_pembayaran:
                  type: string
                  description: Payment method used (e.g., credit card, bank transfer)
              required:
                - account_id
                - course_id
                - metode_pembayaran  
    updateProfile:
      content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: New name for the user
                email:
                  type: string
                  format: email
                  description: New email for the user
                no_telp:
                  type: string
                  description: New phone number for the user
                negara:
                  type: string
                  description: New country for the user
                kota:
                  type: string
                  description: New city for the user
              required:
                - name  
    
    changePassword:
      content:
          application/json:
            schema:
              type: object
              properties:
                password_lama:
                  type: string
                  description: Current password of the user
                password_baru:
                  type: string
                  description: New password for the user
                ulangi_password:
                  type: string
                  description: Confirm the new password
              required:
                - password_lama
                - password_baru
                - ulangi_password

    createUserCourse:
      content:
          application/json:
            schema:
              type: object
              properties:
                course_id:
                  type: integer
                  description: ID of the course to be added
                account_id:
                  type: integer
                  description: ID of the user account
              required:
                - course_id
                - account_id
    
    createRating:
      content:
        application/json:
          schema:
            type: object
            properties:
              course_id:
                type: integer
                description: ID of the course being rated
                example : 1
              skor:
                type: integer
                minimum: 0
                maximum: 4
                description: Rating score for the course (0 to 5)
                example: 1
              comment:
                type: string
                description: Optional comment for the rating
                example : Great Course
            required:
              - course_id
              - skor

    updateRating:
      content:
          application/json:
            schema:
              type: object
              properties:
                skor:
                  type: integer
                  minimum: 0
                  maximum: 5
                  description: Updated rating score for the course (0 to 5)
                comment:
                  type: string
                  description: Updated comment for the rating
              required:
                - skor
